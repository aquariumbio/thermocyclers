{"config":{"title":"Thermocyclers","description":"No description given","copyright":"No copyright declared","version":"no version info","authors":[],"maintainer":{"name":"No maintainer","email":"noone@nowehere"},"acknowledgements":[],"github":{"repo":"none","user":"none","access_token":"none"},"keywords":[],"aquadoc_version":"1.0.2"},"components":[{"library":{"name":"AbstractThermocycler","category":"Thermocyclers","code_source":"# frozen_string_literal: true\n\n# Abstract PCR thermocycler\n#\n# @author Devin Strickland \u003cstrcklnd@uw.edu\u003e\nclass AbstractThermocycler\n  # CONSTANTS that really shouldn't ever change\n  # Should be overriden in concrete class\n  MODEL = ''\n  PROGRAM_EXT = ''\n\n  private_constant :MODEL, :PROGRAM_EXT\n\n  attr_reader :params\n\n  # Instantiates the class and sets the `@params` insteance variable\n  #\n  # @return [Thermocycler]\n  def initialize\n    @params = default_params.update(user_defined_params)\n  end\n\n  # Lab-specific, user-defined parameters\n  #\n  # @note Should be overriden in concrete class\n  # @return [Hash]\n  def user_defined_params\n    {}\n  end\n\n  ########## Language Methods\n  # These methods are not very specific and will probably need to be overridden\n  #   in the concrete classes.\n\n  # Instructions for turning on the thermocycler\n  #\n  # @return [String]\n  def turn_on\n    \"Turn on the #{model}\"\n  end\n\n  # Instructions for placing a plate in the instrument\n  #\n  # @param plate [Collection]\n  # @return [String]\n  def place_plate_in_instrument(plate:)\n    \"Place plate #{plate} in the thermocycler\"\n  end\n\n  # Instructions for confirming the orientation of a plate in the instrument\n  #\n  # @return [String]\n  def confirm_plate_orientation\n    'MAKE SURE THAT THE PLATE IS IN THE CORRECT ORIENTATION'\n  end\n\n  # Instructions for selecting the PCR program template\n  #\n  # @param program [PCRProgram]\n  # @return [String]\n  def select_program_template(program:)\n    file = program_template_file(program: program)\n    \"Choose the program template \u003cb\u003e#{file}\u003c/b\u003e\"\n  end\n\n  # Instructions for opening the lid\n  #\n  # @return [String]\n  def open_lid\n    'Click the \u003cb\u003eOpen Lid\u003c/b\u003e button'\n  end\n\n  # Instructions for closing the lid\n  #\n  # @return [String]\n  def close_lid\n    'Click the \u003cb\u003eClose Lid\u003c/b\u003e button'\n  end\n\n  # Instructions for starting the run\n  #\n  # @return [String]\n  def start_run\n    'Click the \u003cb\u003eStart Run\u003c/b\u003e button'\n  end\n\n  ########## Image Methods\n  # These probably should NOT be overridden in the concrete classes\n\n  # Image for opening the lid\n  #\n  # @return [String]\n  def open_lid_image\n    image_path(image_name: params[:open_lid_image])\n  end\n\n  # Image for closing the lid\n  #\n  # @return [String]\n  def close_lid_image\n    image_path(image_name: params[:close_lid_image])\n  end\n\n  # Image for selecting the PCR program template in the software\n  #\n  # @return [String]\n  def setup_program_image\n    image_path(image_name: params[:setup_program_image])\n  end\n\n  # Image for starting the run\n  #\n  # @return [String]\n  def start_run_image\n    image_path(image_name: params[:start_run_image])\n  end\n\n  ########## Template File Methods\n  # These probably should NOT be overridden in the concrete classes\n\n  def program_template_file(program:)\n    template_file(\n      template_name: program.program_template_name,\n      extension: :PROGRAM_EXT\n    )\n  end\n\n  ########## Getter Methods\n  # These should NOT be overridden in the concrete classes\n\n  # The model of the thermocycler\n  #\n  # @return [String]\n  def model\n    self.class.const_get(:MODEL)\n  end\n\n  private\n\n  def default_params\n    params = {\n      experiment_filepath: '',\n      export_filepath: '',\n      image_path: '',\n      setup_program_image: 'setup_program.png',\n      open_lid_image: 'open_lid.png',\n      close_lid_image: 'close_lid.png',\n      start_run_image: 'start_run.png'\n    }\n    params.update(default_qpcr_params)\n    params\n  end\n\n  def default_qpcr_params\n    {\n      # This space intentionally left blank\n    }\n  end\n\n  def image_path(image_name:)\n    File.join(params[:image_path], image_name)\n  end\n\n  def template_file(template_name:, extension:)\n    ext = self.class.const_get(extension)\n    if extension.present?\n      (template_name + '.' + ext).gsub(/\\.+/, '.')\n    else\n      template_name\n    end\n  end\n\n  def format_show_array(ary)\n    ary.join('\u003cbr\u003e')\n  end\nend\n\n# Module that provides qPCR-specific methods for thermocyclers\n#\n# @author Devin Strickland \u003cstrcklnd@uw.edu\u003e\nmodule QPCRMixIn\n  # CONSTANTS that really shouldn't ever change\n  # Should be overriden in concrete class\n  LAYOUT_EXT =  ''\n  SOFTWARE_NAME = 'thermocycler software'\n\n  private_constant :LAYOUT_EXT, :SOFTWARE_NAME\n\n  ########## Language Methods\n  # These methods are not very specific and will probably need to be overridden\n  #   in the concrete classes.\n\n  # Instructions for opening the software that controls the thermocycler\n  #\n  # @return [String]\n  def open_software\n    \"Open #{software_name}\"\n  end\n\n  # Instructions for setting the dye channel on a qPCR thermocycler\n  #\n  # @param composition [PCRComposition]\n  # @param dye_name [String] can be supplied instead of a `PCRComposition`\n  # @return [String]\n  def set_dye(composition: nil, dye_name: nil)\n    dye_name = composition.dye.try(:input_name) || dye_name\n    \"Choose \u003cb\u003e#{dye_name}\u003c/b\u003e as the dye\"\n  end\n\n  # Instructions for selecting the plate layout template in the software\n  #\n  # @param program [PCRProgram]\n  # @return [String]\n  def select_layout_template(program:)\n    file = layout_template_file(program: program)\n    \"Choose the layout template \u003cb\u003e#{file}\u003c/b\u003e\"\n  end\n\n  # Instructions for saving an experiment file\n  #\n  # @param filename [String] the name of the file (without the full path)\n  # @return [String]\n  def save_experiment_file(filename:)\n    \"Save the experiment as #{filename} in #{params[:experiment_filepath]}\"\n  end\n\n  # Instructions for exporting measurements from a qPCR run\n  #\n  # @return [String]\n  def export_measurements\n    'Click \u003cb\u003eExport\u003c/b\u003e\u003cbr\u003e' \\\n      'Select \u003cb\u003eExport All Data Sheets\u003c/b\u003e\u003cbr\u003e' \\\n      'Export all sheets as CSV\u003cbr\u003e' \\\n      \"Save files to the #{params[:export_filepath]} directory\"\n  end\n\n  ########## Image Methods\n  # These probably should NOT be overridden in the concrete classes\n\n  # Image for launching the software that controls the thermocycler\n  #\n  # @return [String]\n  def open_software_image\n    image_path(image_name: params[:open_software_image])\n  end\n\n  # Image for setting up the software workspace\n  #\n  # @return [String]\n  def setup_workspace_image\n    image_path(image_name: params[:setup_workspace_image])\n  end\n\n  # Image for selecting the plate layout template in the software\n  #\n  # @return [String]\n  def setup_plate_layout_image\n    image_path(image_name: params[:setup_plate_layout_image])\n  end\n\n  # Image for exporting measurements from a qPCR run\n  #\n  # @return [String]\n  def export_measurements_image\n    image_path(image_name: params[:export_measurements_image])\n  end\n\n  ########## Template File Methods\n  # These probably should NOT be overridden in the concrete classes\n\n  def layout_template_file(program:)\n    template_file(\n      template_name: program.layout_template_name,\n      extension: :LAYOUT_EXT\n    )\n  end\n\n  ########## Getter Methods\n  # These should NOT be overridden in the concrete classes\n\n  # The name of the software that controls the thermocycler\n  #\n  # @return [String]\n  def software_name\n    self.class.const_get(:SOFTWARE_NAME)\n  end\n\n  private\n\n  def default_qpcr_params\n    {\n      open_software_image: 'open_software.png',\n      setup_workspace_image: 'setup_workspace.png',\n      setup_plate_layout_image: 'setup_plate_layout.png',\n      export_measurements_image: 'export_measurements.png'\n    }\n  end\nend\n"}},{"library":{"name":"BioRadCFX96","category":"Thermocyclers","code_source":"# frozen_string_literal: true\n\nneeds 'Thermocyclers/AbstractThermocycler'\n\n# Class for handling BioRad CFX96 qPCR thermocycler\n#\n# @author Devin Strickland \u003cstrcklnd@uw.edu\u003e\n# @author Eriberto Lopez \u003celopez3@uw.edu\u003e\n# @note BioRad module originally deployed as `QPCR_ThermocyclerLib`\n#   on UW BIOFAB production 10/05/18\nclass BioRadCFX96 \u003c AbstractThermocycler\n  include QPCRMixIn\n\n  MODEL = 'BioRad CFX96'\n  PROGRAM_EXT = '.prcl'\n  LAYOUT_EXT =  '.pltd'\n  SOFTWARE_NAME = 'CFX Manager Software'\n\n  # Instantiates the class\n  #\n  # @return [BioRadCFX96]\n  def initialize\n    super()\n  end\n\n  # Lab-specific, user-defined parameters\n  #\n  # @return [Hash]\n  def user_defined_params\n    {\n      experiment_filepath: 'Desktop/_qPCR_UWBIOFAB',\n      export_filepath: 'Desktop/BIOFAB qPCR Exports',\n      image_path: 'Actions/BioRad_qPCR_Thermocycler',\n      open_software_image: 'open_biorad_thermo_workspace.JPG',\n      setup_workspace_image: 'setup_workspace.JPG',\n      setup_program_image: 'setting_up_qPCR_thermo_conditions.png',\n      setup_plate_layout_image: 'setting_up_plate_layout_v1.png',\n      open_lid_image: 'open_lid.png',\n      close_lid_image: 'close_lid.png',\n      start_run_image: 'start_run.png',\n      export_measurements_image: 'exporting_qPCR_quantification.png'\n    }\n  end\n\n  ########## Language Methods\n  # These methods are not very specific and will probably need to be overridden\n  #   in the concrete classes.\n\n  # Instructions for turning on the thermocycler\n  #\n  # @return [String]\n  def turn_on\n    'If the thermocycler is off, toggle the power switch in the back of the' \\\n    ' instrument'\n  end\n\n  # Instructions for opening the software that controls the thermocycler\n  #\n  # @return [String]\n  def open_software\n    \"Open #{software_name}\"\n  end\n\n  # Instructions for setting the dye channel on a qPCR thermocycler\n  #\n  # @param composition [PCRComposition]\n  # @param dye_name [String] can be supplied instead of a `PCRComposition`\n  # @return [String]\n  # @todo should be moved to MixIn\n  def set_dye(composition: nil, dye_name: nil)\n    dye_name = composition.dye.try(:input_name) || dye_name\n    \"Click on the \u003cb\u003ePrimePCR\u003c/b\u003e and choose \u003cb\u003e#{dye_name}\u003c/b\u003e as the dye\"\n  end\n\n  # Instructions for selecting the PCR program template in the software\n  #\n  # @param program [PCRProgram]\n  # @return [String]\n  def select_program_template(program:)\n    file = program_template_file(program: program)\n    \"Choose the program template \u003cb\u003e#{file}\u003c/b\u003e\"\n  end\n\n  # Instructions for selecting the plate layout template in the software\n  #\n  # @param program [PCRProgram]\n  # @return [String]\n  def select_layout_template(program:)\n    file = layout_template_file(program: program)\n    \"Choose the layout template \u003cb\u003e#{file}\u003c/b\u003e\"\n  end\n\n  # Instructions for placing a plate in the instrument\n  #\n  # @param plate [Collection]\n  # @return [String]\n  def place_plate_in_instrument(plate:)\n    \"Place plate #{plate} in the thermocycler\"\n  end\n\n  # Instructions for confirming the orientation of a plate in the instrument\n  #\n  # @return [String]\n  def confirm_plate_orientation\n    'MAKE SURE THAT THE PLATE IS IN THE CORRECT ORIENTATION'\n  end\n\n  # Instructions for opening the lid\n  #\n  # @return [String]\n  def open_lid\n    'Click the \u003cb\u003eOpen Lid\u003c/b\u003e button'\n  end\n\n  # Instructions for closing the lid\n  #\n  # @return [String]\n  def close_lid\n    'Click the \u003cb\u003eClose Lid\u003c/b\u003e button'\n  end\n\n  # Instructions for starting the run\n  #\n  # @return [String]\n  def start_run\n    'Click the \u003cb\u003eStart Run\u003c/b\u003e button'\n  end\n\n  # Instructions for saving an experiment file\n  #\n  # @param filename [String] the name of the file (without the full path)\n  # @return [String]\n  def save_experiment_file(filename:)\n    \"Save the experiment as #{filename} in #{params[:experiment_filepath]}\"\n  end\n\n  # Instructions for exporting measurements from a qPCR run\n  #\n  # @return [String]\n  def export_measurements\n    'Click \u003cb\u003eExport\u003c/b\u003e\u003cbr\u003e' \\\n      'Select \u003cb\u003eExport All Data Sheets\u003c/b\u003e\u003cbr\u003e' \\\n      'Export all sheets as CSV\u003cbr\u003e' \\\n      \"Save files to the #{params[:export_filepath]} directory\"\n  end\nend\n"}},{"library":{"name":"MiniPCRMini16","category":"Thermocyclers","code_source":"# frozen_string_literal: true\n\nneeds 'Thermocyclers/AbstractThermocycler'\n\n# miniPCR mini16\n# minipcrbio.com\n#\n# @author Devin Strickland \u003cstrcklnd@uw.edu\u003e\n# @todo This is a complicated class because it is a software driven\n#   thermocycler that can be run on a variety of desktop or mobile\n#   platforms.\nclass MiniPCRMini16 \u003c AbstractThermocycler\n  # CONSTANTS that really shouldn't ever change\n  MODEL = 'miniPCR mini16'\n\n  # Instantiates the class\n  #\n  # @return [ThermocyclerTemplate]\n  def initialize\n    super()\n  end\n\n  # Lab-specific, user-defined parameters\n  #\n  # @return [Hash]\n  def user_defined_params\n    {\n      experiment_filepath: 'Desktop/my_experiment_path',\n      export_filepath: 'Desktop/my_export_path',\n      image_path: 'Actions/MiniPCRMini16'\n    }\n  end\n\n  ########## Language Methods\n  # These methods are not very specific and will probably need to be overridden\n  #   in the concrete classes.\n\n  # Instructions for turning on the thermocycler\n  #\n  # @return [String]\n  def turn_on\n    format_show_array([\n      'Connect the miniPCR thermal cycler via USB cable or Bluetooth',\n      \"Turn on the #{MODEL} using the on/off switch on the back of the unit\"\n    ])\n  end\n\n  # Instructions for placing a plate in the instrument\n  #\n  # @param plate [Collection]\n  # @return [String]\n  def place_plate_in_instrument(plate:)\n    'Load the PCR tubes into the metal block'\n  end\n\n  # Instructions for confirming the orientation of a plate in the instrument\n  #\n  # @return [String]\n  def confirm_plate_orientation\n    ''\n  end\n\n  # Instructions for selecting the PCR program template\n  #\n  # @param program [PCRProgram]\n  # @return [String]\n  def select_program_template(program:)\n    file = program_template_file(program: program)\n    \"Select the #{file} protocol from the Library\"\n  end\n\n  # Instructions for opening the lid\n  #\n  # @return [String]\n  def open_lid\n    format_show_array([\n      'Open the lid by pinching the side tabs on the front plate of the miniPCR',\n      'Use your thumb and index fingers to pinch, and lift the lid with your other hand'\n    ])\n  end\n\n  # Instructions for closing the lid\n  #\n  # @return [String]\n  def close_lid\n    format_show_array([\n      'Fully untwist (counterclockwise) the adjustment knob',\n      'Press the lid down until it clicks shut',\n      'Tighten the adjustment knob (clockwise) until you feel light resistance from the tube caps',\n      'Be careful not to over-tighten'\n    ])\n  end\n\n  # Instructions for starting the run\n  #\n  # @return [String]\n  def start_run\n    format_show_array([\n      'Click the \u003cb\u003eRun\u003c/b\u003e button',\n      'The run will automatically begin, signaled by the green LED turning on'\n    ])\n  end\n\n  def setup_program_image; end\nend\n"}},{"library":{"name":"QPCRThermocyclerTemplate","category":"Thermocyclers","code_source":"# frozen_string_literal: true\n\nneeds 'Thermocyclers/AbstractThermocycler'\n\n# Template for making new qPCR thermocycler classes\n#\n# @author Devin Strickland \u003cstrcklnd@uw.edu\u003e\nclass ThermocyclerTemplate \u003c AbstractThermocycler\n  # CONSTANTS that really shouldn't ever change\n  MODEL = ''\n  PROGRAM_EXT = ''\n  LAYOUT_EXT =  ''\n  SOFTWARE_NAME = ''\n\n  # Instantiates the class\n  #\n  # @return [ThermocyclerTemplate]\n  def initialize\n    super()\n  end\n\n  # Lab-specific, user-defined parameters\n  #\n  # @return [Hash]\n  def user_defined_params\n    {\n      experiment_filepath: 'Desktop/my_experiment_path',\n      export_filepath: 'Desktop/my_export_path',\n      image_path: 'Actions/ThermocyclerTemplate'\n    }\n  end\n\n  ########## Language Methods\n  # These methods are not very specific and will probably need to be overridden\n  #   in the concrete classes.\n\n  # # Instructions for turning on the thermocycler\n  # #\n  # # @return [String]\n  # def turn_on()\n  #   \"Turn on the #{model}\"\n  # end\n\n  # # Instructions for opening the software that controls the thermocycler\n  # #\n  # # @return [String]\n  # def open_software()\n  #   \"Open #{software_name}\"\n  # end\n\n  # # Instructions for setting the dye channel on a qPCR thermocycler\n  # #\n  # # @param composition [PCRComposition]\n  # # @param dye_name [String] can be supplied instead of a `PCRComposition`\n  # # @return [String]\n  # # @todo should be moved to MixIn\n  # def set_dye(composition: nil, dye_name: nil)\n  #   dye_name = composition.dye.try(:input_name) || dye_name\n  #   \"Choose \u003cb\u003e#{dye_name}\u003c/b\u003e as the dye\"\n  # end\n\n  # # Instructions for selecting the PCR program template in the software\n  # #\n  # # @param program [PCRProgram]\n  # # @return [String]\n  # def select_program_template(program:)\n  #   file = program_template_file(program: program)\n  #   \"Choose the program template \u003cb\u003e#{file}\u003c/b\u003e\"\n  # end\n\n  # # Instructions for selecting the plate layout template in the software\n  # #\n  # # @param program [PCRProgram]\n  # # @return [String]\n  # def select_layout_template(program:)\n  #   file = layout_template_file(program: program)\n  #   \"Choose the layout template \u003cb\u003e#{file}\u003c/b\u003e\"\n  # end\n\n  # # Instructions for placing a plate in the instrument\n  # #\n  # # @param plate [Collection]\n  # # @return [String]\n  # def place_plate_in_instrument(plate:)\n  #   \"Place plate #{plate} in the thermocycler\"\n  # end\n\n  # # Instructions for confirming the orientation of a plate in the instrument\n  # #\n  # # @return [String]\n  # def confirm_plate_orientation()\n  #   \"MAKE SURE THAT THE PLATE IS IN THE CORRECT ORIENTATION\"\n  # end\n\n  # # Instructions for opening the lid\n  # #\n  # # @return [String]\n  # def open_lid()\n  #   \"Click the \u003cb\u003eOpen Lid\u003c/b\u003e button\"\n  # end\n\n  # # Instructions for closing the lid\n  # #\n  # # @return [String]\n  # def close_lid()\n  #   \"Click the \u003cb\u003eClose Lid\u003c/b\u003e button\"\n  # end\n\n  # # Instructions for starting the run\n  # #\n  # # @return [String]\n  # def start_run()\n  #   \"Click the \u003cb\u003eStart Run\u003c/b\u003e button\"\n  # end\n\n  # # Instructions for saving an experiment file\n  # #\n  # # @param filename [String] the name of the file (without the full path)\n  # # @return [String]\n  # def save_experiment_file(filename:)\n  #   \"Save the experiment as #{filename} in #{params[:experiment_filepath]}\"\n  # end\n\n  # # Instructions for exporting measurements from a qPCR run\n  # #\n  # # @return [String]\n  # def export_measurements()\n  #   \"Click \u003cb\u003eExport\u003c/b\u003e\u003cbr\u003e\" +\n  #   \"Select \u003cb\u003eExport All Data Sheets\u003c/b\u003e\u003cbr\u003e\" +\n  #   \"Export all sheets as CSV\u003cbr\u003e\" +\n  #   \"Save files to the #{params[:export_filepath]} directory\"\n  # end\nend\n"}},{"library":{"name":"TestThermocycler","category":"Thermocyclers","code_source":"# frozen_string_literal: true\n\nneeds 'Thermocyclers/AbstractThermocycler'\n\n# Class to use as a generic qPCR thermocycler for testing\n#\n# @author Devin Strickland \u003cstrcklnd@uw.edu\u003e\nclass TestThermocycler \u003c AbstractThermocycler\n  include QPCRMixIn\n\n  # CONSTANTS that really shouldn't ever change\n  MODEL = 'Test Model'\n  PROGRAM_EXT = '.abc'\n  LAYOUT_EXT =  'xyz' # Intentionally missing leading dot for test\n  SOFTWARE_NAME = 'Test Software'\n\n  # Instantiates the class\n  #\n  # @return [TestThermocycler]\n  def initialize\n    super()\n  end\n\n  # Lab-specific, user-defined parameters\n  #\n  # @return [Hash]\n  def user_defined_params\n    {\n      experiment_filepath: 'Desktop/test_experiment_path',\n      export_filepath: 'Desktop/test_export_path',\n      image_path: 'Actions/TestThermocycler'\n    }\n  end\n\n  def say_hello\n    \"Hello, my name is #{MODEL}\"\n  end\nend\n"}},{"library":{"name":"ThermocyclerTemplate","category":"Thermocyclers","code_source":"# CollectionData\n\nneeds 'Standard Libs/AssociationManagement'\n\n# for managing data associations of collections\n# and ensuring that samples/item data is handled correctly\nmodule CollectionData\n  include AssociationManagement\n  include PartProvenance\n\n  # Is this being used?\n  # Associates data to every part in a plate\n  #\n  # @param plate [Collection] the collection\n  # @param data [Anything] the data to be associated\n  def associate_to_all(plate:, data:, key:)\n    data_map = []\n    parts.each do |part|\n      loc = plate.find(part)\n      loc[2] = data\n      loc[3] = key\n      data_map.push(loc)\n    end\n    associate_value_key_to_parts(plate: plate, data_map: data_map)\n  end\n\n  # Creates table for the data associated with key\n  #\n  # @param collection [Collection] the plate being used\n  # @param keys [Array\u003cString\u003e] an array of keys that the data is\n  #        associated with.\n  # @return table of parts with data information\n\n  def display_all_data(collection, keys)\n    rc_list = []\n    parts = collection.parts\n    parts.each do |part|\n      rc_list += collection.find(part)\n    end\n    display_data(collection, rc_list, keys)\n  end\n\n  # Associates data in data_map to parts in plate.\n  #\n  # @param plate [Collection] the plate containing the Items\n  # @param data_map [Array\u003cArray\u003crow, column, value\u003e, ...\u003e] \n  #                                         determine where data goes\n  # @param key [String] the key that\n  def associate_value_to_parts(plate:, data_map:, key:)\n    data_map.each do |loc_val_array|\n      loc_val_array[3] = key\n    end\n    associate_value_key_to_parts(plate: plate, data_map: data_map)\n  end\n\n  # Creates a DataAssociation for each entry with Key :part_data and\n  # Value \"well\" (saved as DataAssociation.object)\n  # Each value is associated to its respective key\n  #\n  # @param plate [Collection] the plate that contains the parts (items)\n  # @param data_map [Array\u003cArray\u003cr,c, value, key\u003e, ...\u003e] data map of all parts\n  def associate_value_key_to_parts(plate:, data_map:)\n    data_map.each do |key_value_map|\n      part = plate.part(key_value_map[0], key_value_map[1])\n      data_value = key_value_map[2]\n      key = key_value_map[3]\n      associate_data(part, key.to_sym, data_value) unless part.nil?\n    end\n  end\n\n  # Adds data to list of coordinates\n  # If there is already a data value present, the new data value will\n  # either replace it, or be appended to it\n  # based on the value of the append boolean\n  #\n  # @param coordinates [Array\u003cRow(int), Column(int), Optional(String)] the\n  #       coordinate list to be modified\n  # @param data [String] string to be added to the list data\n  # @param append: [Boolean] default true.  Replace if false\n  def append_x_to_rcx(coordinates, data, append: true)\n    data = data.to_s\n    if coordinates[2].nil? || !append\n      coordinates[2] = data\n    else\n      coordinates[2] += ', ' + data\n    end\n    coordinates\n  end\n\n\n  # Creates an array of samples that are the same in two different Collections\n  #\n  # @param collection_a [Collection] a collection\n  # @param collection_b [Collection] a collection\n  # @return [Array\u003cSample\u003e]\n\n  def find_like_samples(collection_a, collection_b)\n    collection_a.parts.map!(\u0026:sample) \u0026 collection_b.parts.map!(\u0026:sample)\n  end\n\n\n  # Returns an array of parts in the Collection that match the right Sample\n  #\n  # @param collection [Collection] the Collection that the Item (part) is in\n  # @param sample [Sample] the Sample searched for\n\n  def parts_from_sample(collection, sample)\n    part_location = collection.find(sample)\n    parts = []\n    part_location.each do |coordinates|\n      parts.push(collection.part(coordinates[0], coordinates[1]))\n    end\n    parts\n  end\n\n\n  # Adds provenance history to to_object and from from_object\n  #\n  # @param from_obj [Item] object that provenance is coming from\n  # @param to_obj [Item] the object that provenance is going to\n  \n  def from_obj_to_obj_provenance(to_obj, from_obj)\n    raise \"Object #{to_obj.id} is not an item\" unless to_obj.is_a? Item\n    raise \"Object #{from_obj.id} is not an item\" unless from_obj.is_a? Item\n\n    from_obj_map = AssociationMap.new(from_obj)\n    to_obj_map = AssociationMap.new(to_obj)\n    add_provenance(from: from_obj, from_map: from_obj_map,\n                   to: to_obj, to_map: to_obj_map)\n    from_obj_map.save\n    to_obj_map.save\n  end\nend\n"}},{"library":{"name":"Thermocyclers","category":"Thermocyclers","code_source":"# frozen_string_literal: true\n\n# Library for handling thermocyclers, including qPCR thermocyclers\n# @author Devin Strickland \u003cstrcklnd@uw.edu\u003e\n\nneeds 'Thermocyclers/TestThermocycler'\nneeds 'Thermocyclers/BioRadCFX96'\nneeds 'Thermocyclers/MiniPCRMini16'\n\n# Helper module for standard thermocycler procedures\n#\n# @author Devin Strickland \u003cstrcklnd@uw.edu\u003e\n# @author Eriberto Lopez \u003celopez3@uw.edu\u003e\n# @note methods originally deployed as `QPCR_ThermocyclerLib`\n#   on UW BIOFAB production 10/05/18\nmodule ThermocyclerHelper\n  # Steps for setting up a proram in a thermocycler\n  #\n  # @param thermocycler [Thermocycler]\n  # @param program [PCRProgram]\n  # @param composition [PCRComposition]\n  # @param qpcr [Boolean] whether to call setup methods specific to a\n  #   qPCR experiment: `open_software`, `set_dye`, `select_layout_template`,...\n  # @return [void]\n  def set_up_program(thermocycler:, program:, composition:, qpcr: false)\n    show do\n      title \"Set Up #{thermocycler.model} Thermocycler\"\n\n      if qpcr\n        note thermocycler.open_software\n        image thermocycler.open_software_image\n        separator\n\n        note thermocycler.set_dye(composition: composition)\n        separator\n\n        image thermocycler.setup_workspace_image\n        separator\n      end\n\n      note thermocycler.select_program_template(program: program)\n      image thermocycler.setup_program_image\n      separator\n\n      if qpcr\n        note thermocycler.select_layout_template(program: program)\n        image thermocycler.setup_plate_layout_image\n      end\n    end\n  end\n\n  # Steps for loading physical tubes or plates into a thermocycler\n  #\n  # @param thermocycler [Thermocycler]\n  # @param items [Item, Array\u003cItem\u003e]\n  # @param filename [String] the filename to safe the experiment file\n  # @return [void]\n  def load_plate_and_start_run(thermocycler:, items: [],\n                               experiment_filename: nil)\n    # Normalize the presentation of `items`\n    items = [items] if items.respond_to?(:collection?)\n    plate = single_96well_plate?(items)\n\n    show do\n      title \"Start Run on #{thermocycler.model} Thermocycler\"\n\n      note thermocycler.open_lid\n      image thermocycler.open_lid_image\n      separator\n\n      # TODO: Make this work for plates, stripwells, and individual tubes\n      if plate\n        note thermocycler.place_plate_in_instrument(plate: items.first)\n        warning thermocycler.confirm_plate_orientation\n      else\n        note 'Load the PCR tubes into the metal block'\n      end\n      separator\n\n      note thermocycler.close_lid\n      image thermocycler.close_lid_image\n      separator\n\n      note thermocycler.start_run\n      if experiment_filename.present?\n        note thermocycler.save_experiment_file(filename: experiment_filename)\n      end\n    end\n  end\n\n  # Export the measurements, if a qPCR thermocycler\n  #\n  # @param thermocycler [Thermocycler]\n  # @return [void]\n  def export_measurements(thermocycler:)\n    show do\n      title 'Export Measurements'\n\n      note 'Once the run has finished, export the measurements'\n      note thermocycler.export_measurements\n      image thermocycler.export_measurements_image\n    end\n  end\n\n  # TODO: A method from Eriberto Lopez's code that I haven't implemented yet\n  # def upload_measurments(experiment_name)\n  #   upload_filename = experiment_name + \" - Quantification Summary_0.csv\" # Suffix of file will always be the same\n  #   up_show, up_sym = upload_show(upload_path = EXPORT_FILEPATH, upload_filename)\n  #   if debug\n  #     upload = Upload.find(11278) # Dummy data set\n  #   else\n  #     upload = find_upload_from_show(up_show, up_sym)\n  #   end\n  #   return upload\n  # end\n\n  private\n\n  # Test whether an array of items is a single 96 well plate\n  #\n  # @param items [Array\u003cItem\u003e]\n  # @return [Boolean]\n  def single_96well_plate?(items)\n    items.length == 1 \u0026\u0026 is_96well_plate?(items.first)\n  end\n\n  # Test whether an item is a 96 well plate\n  #\n  # @param item [Item]\n  # @return [Boolean]\n  def is_96well_plate?(item)\n    return false unless item.respond_to?(:capacity)\n\n    item.capacity == 96\n  end\nend\n\n# Factory class for building thermocycler objects\n#\n# @author Devin Strickland \u003cstrcklnd@uw.edu\u003e\nclass ThermocyclerFactory\n  # Instantiates a new `Thermocycler`\n  #\n  # @param model [String] the `MODEL` of the thermocycler. Must match the\n  #   constant `MODEL` in an exisiting thermocycler class.\n  # @return [Thermocycler]\n  def self.build(model:)\n    case model\n    when TestThermocycler::MODEL\n      TestThermocycler.new\n    when BioRadCFX96::MODEL\n      BioRadCFX96.new\n    when MiniPCRMini16::MODEL\n      MiniPCRMini16.new\n    else\n      msg = \"Unrecognized Thermocycler Model: #{model}\"\n      raise ThermocyclerInputError, msg\n    end\n  end\nend\n\nclass ThermocyclerInputError \u003c ProtocolError; end\n"}}]}